# -*- coding: utf-8 -*-
"""2023_JikkenII_03_04.ipynb のコピー

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yZ39hqQQ3KEVw5oioGuDZJas4TatAP_x

# 実験 II (2023 年度後期) 第 3 回 資料 4

2023.10.10 (火) 第 3, 4 限  
岡田 真

# アヤメの分類 4 特徴量 3 クラス分類
"""

# -*- coding: utf-8 -*-
from sklearn import datasets, svm

# アヤメのデータをロードし、変数irisに格納
iris = datasets.load_iris()

# 特徴量のセットを変数Xに、ターゲットを変数yに格納
X = iris.data
y = iris.target

# 分類用にサポートベクトルマシンを用意
clf = svm.SVC(C=1.0, kernel='linear', decision_function_shape='ovr')
# データに最適化
clf.fit(X, y)

# データを分類器に与え、予測を得る
result = clf.predict(X)

print('ターゲット')
print(y)
print('機械学習による予測')
print(result)

# データ数をtotalに格納
total = len(X)
# ターゲット（正解）と予測が一致した数をsuccessに格納
success = sum(result==y)

# 正解率をパーセント表示
print('正解率')
print(100.0*success/total)

"""scikit-learn の評価指標を求めるモジュールは以下のようになる．

| 種類 | scikit-learn モジュール |
| --- | --- |
| 正解率 (Accuracy) | metrics.accuracy_score() |
| 適合率 (Precision) | metrics.precision_score() |
| 再現率 (Recall) | metrics.recall_score() |
| F 値 (F-measure) | metrics.f1_score() |

その他の指標については scikit-learn のリファレンスページにある．  
[scikit-learn 評価指標モジュールリファレンスページ (英語)](https://scikit-learn.org/stable/modules/model_evaluation.html)

具体的な使い方は以下のようになる．

2 クラス分類のときは特別に指定なしで使える．デフォルト値もこれ (`'binary'`)．  
多クラス分類のときは分類結果をどのように平均を取るか指定する必要がある．  
あるクラスとそれ以外 (One-VS-Rest) の評価指標 (適合率，再現率，F 値) の値を取って，それを単純にクラス数を使って平均を取る「マクロ平均」か，各分類結果での True Positive と False Positive の値を考慮して平均を取る「マイクロ平均」か，それ以外の特殊な平均かを選ぶ必要がある．

例ではマイクロ平均 (`'micro'`) を取る．

```python
# 使いたい評価指標のモジュールを import する
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# 確認用データを作る
y_pred = [0, 2, 1, 3]
y_true = [0, 1, 2, 3]

# 各評価指標の値を得る
# 正解，予測結果の順で与える
# 多クラス分類の場合に平均 (average) の計算方法の指定が必要な場合はそれも与える
acc = accuracy_score(y_true, y_pred)
p = precision_score(y_true, y_pred, average='micro')
r = recall_score(y_true, y_pred, average='micro')
f1 = f1_score(y_true, y_pred, average='micro')

# 表示する
print(acc, p, r, f1)

```
"""

# 使いたい評価指標のモジュールを import する
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# 確認用データを作る
y_pred = [0, 2, 1, 3] # 予測結果の例
y_true = [0, 1, 2, 3] # 真値の例

# 各評価指標の値を得る
# 正解，予測結果の順で与える
# 多クラス分類の場合に平均 (average) の計算方法の指定が必要な場合はそれも与える
acc = accuracy_score(y_true, y_pred)
p = precision_score(y_true, y_pred, average='micro')
r = recall_score(y_true, y_pred, average='micro')
f1 = f1_score(y_true, y_pred, average='micro')

# 表示する
print(acc, p, r, f1)

"""## 演習課題 3-3
多クラス分類の方法 `'ovr'` と `'ovo'` を切り替えた結果，カーネルを `'linear'` から `'rbf'` を切り替えた結果，パラメータ $\gamma$ を表す引数 `'gamma'` を `'auto'` から `'1.0'` に変更した結果を確認する．  

その際に，評価指標である正解率 (Accuracy)，適合率 (Precision)，再現率 (Recall)，F 値 (F-measure) を表示して，その値で確認する．

したがって，
('多クラス分類の方法', 'カーネル', 'ガンマ (カーネルが `'rbf'` のとき)) の条件として以下の 6 つの組み合わせができる

1. (``ovr``, ``linear``),  
2. (``ovo``, ``linear``),
3. (``ovr``, ``rbf``, ``auto``),
4. (``ovo``, ``rbf``, ``auto``),
5. (``ovr``, ``rbf``, ``1.0``),
6. (``ovo``, ``rbf``, ``1.0``)  

この 6 個の組み合わせについてそれぞれ正解率，適合率，再現率，F 値を求める．

#演習課題3-3
1. (``ovr``, ``linear``),  
2. (``ovo``, ``linear``),
3. (``ovr``, ``rbf``, ``auto``),
4. (``ovo``, ``rbf``, ``auto``),
5. (``ovr``, ``rbf``, ``1.0``),
6. (``ovo``, ``rbf``, ``1.0``)  
のそれぞれの組み合わせについて, 正解率, 適合率, 再現率, F 値を以下にまとめた.
"""

# -*- coding: utf-8 -*-
from sklearn import datasets, svm

# アヤメのデータをロードし、変数irisに格納
iris = datasets.load_iris()

# 特徴量のセットを変数Xに、ターゲットを変数yに格納
X = iris.data
y = iris.target

# 分類用にサポートベクトルマシンを用意
clf = svm.SVC(C=1.0, kernel='linear', decision_function_shape='ovr')
# データに最適化
clf.fit(X, y)

# データを分類器に与え、予測を得る
result = clf.predict(X)

print('ターゲット')
print(y)
print('機械学習による予測')
print(result)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

acc = accuracy_score(y, result)
p = precision_score(y, result, average='micro')
r = recall_score(y, result, average='micro')
f1 = f1_score(y, result, average='micro')

# 表示する
print('正解率: {0}, 適合率: {1}, 再現率: {2}, F値: {3}'.format(acc, p, r, f1))

# 分類用にサポートベクトルマシンを用意
clf = svm.SVC(C=1.0, kernel='linear', decision_function_shape='ovo')
# データに最適化
clf.fit(X, y)

# データを分類器に与え、予測を得る
result = clf.predict(X)

print('ターゲット')
print(y)
print('機械学習による予測')
print(result)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

acc = accuracy_score(y, result)
p = precision_score(y, result, average='micro')
r = recall_score(y, result, average='micro')
f1 = f1_score(y, result, average='micro')

# 表示する
print('正解率: {0}, 適合率: {1}, 再現率: {2}, F値: {3}'.format(acc, p, r, f1))

# 分類用にサポートベクトルマシンを用意
clf = svm.SVC(C=1.0, kernel='rbf', decision_function_shape='ovr', gamma='auto')
# データに最適化
clf.fit(X, y)

# データを分類器に与え、予測を得る
result = clf.predict(X)

print('ターゲット')
print(y)
print('機械学習による予測')
print(result)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

acc = accuracy_score(y, result)
p = precision_score(y, result, average='micro')
r = recall_score(y, result, average='micro')
f1 = f1_score(y, result, average='micro')

# 表示する
print('正解率: {0}, 適合率: {1}, 再現率: {2}, F値: {3}'.format(acc, p, r, f1))

# 分類用にサポートベクトルマシンを用意
clf = svm.SVC(C=1.0, kernel='rbf', decision_function_shape='ovo', gamma='auto')
# データに最適化
clf.fit(X, y)

# データを分類器に与え、予測を得る
result = clf.predict(X)

print('ターゲット')
print(y)
print('機械学習による予測')
print(result)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

acc = accuracy_score(y, result)
p = precision_score(y, result, average='micro')
r = recall_score(y, result, average='micro')
f1 = f1_score(y, result, average='micro')

# 表示する
print('正解率: {0}, 適合率: {1}, 再現率: {2}, F値: {3}'.format(acc, p, r, f1))

# 分類用にサポートベクトルマシンを用意
clf = svm.SVC(C=1.0, kernel='rbf', decision_function_shape='ovr', gamma=1.0)
# データに最適化
clf.fit(X, y)

# データを分類器に与え、予測を得る
result = clf.predict(X)

print('ターゲット')
print(y)
print('機械学習による予測')
print(result)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

acc = accuracy_score(y, result)
p = precision_score(y, result, average='micro')
r = recall_score(y, result, average='micro')
f1 = f1_score(y, result, average='micro')

# 表示する
print('正解率: {0}, 適合率: {1}, 再現率: {2}, F値: {3}'.format(acc, p, r, f1))

# 分類用にサポートベクトルマシンを用意
clf = svm.SVC(C=1.0, kernel='rbf', decision_function_shape='ovo', gamma=1.0)
# データに最適化
clf.fit(X, y)

# データを分類器に与え、予測を得る
result = clf.predict(X)

print('ターゲット')
print(y)
print('機械学習による予測')
print(result)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

acc = accuracy_score(y, result)
p = precision_score(y, result, average='micro')
r = recall_score(y, result, average='micro')
f1 = f1_score(y, result, average='micro')

# 表示する
print('正解率: {0}, 適合率: {1}, 再現率: {2}, F値: {3}'.format(acc, p, r, f1))

"""1. 正解率: 0.9933333333333333
   適合率: 0.9933333333333333
   再現率: 0.9933333333333333
   F値: 0.9933333333333333
2. 正解率: 0.9933333333333333
   適合率: 0.9933333333333333
   再現率: 0.9933333333333333
   F値: 0.9933333333333333
3. 正解率: 0.9866666666666667
   適合率: 0.9866666666666667
   再現率: 0.9866666666666667
   F値: 0.9866666666666668
4. 正解率: 0.9866666666666667
   適合率: 0.9866666666666667
   再現率: 0.9866666666666667
   F値: 0.9866666666666668
5. 正解率: 0.98
   適合率: 0.98
   再現率: 0.98
   F値: 0.98
6. 正解率: 0.98
   適合率: 0.98
   再現率: 0.98
   F値: 0.98
   となった。
"""